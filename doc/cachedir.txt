*cachedir.txt*	Plugin for setting cache dirs globally
*cachedir*

Author:         Neui
License:        BSD 2-Clause
Homepage:       https://gitlab.com/Neui/cachedir.vim
Version:        1.0


==============================================================================
CONTENTS                                                   *cachedir-contents*

	1. Intro ................................ |cachedir-intro|
	2. Usage ................................ |cachedir-usage|
	3. Configuration ........................ |cachedir-config|
		3.1. cachedir_prefix ............ |cachedir_prefix|
		3.3. cachedir_vimprefix ......... |cachedir_vimprefix|
		3.3. cachedir_globalprefix ...... |cachedir_globalprefix|
		3.4. cachedir_dirsep ............ |cachedir_dirsep|
		3.5. cachedir_auto_apply ........ |cachedir_auto_apply|
		     Cachedir_apply_userconfig .. |Cachedir_apply_userconfig()|
		3.6. cachedir_config ............ |cachedir_config|
		3.7. cachedir_version ........... |cachedir_version|
	4. Supported Plugins .................... |cachedir-plugins|
	5. For Plugin Developers ................ |cachedir-dev|
		5.1. Configuration .............. |cachedir-dev-config|
		     cachedir_loaded ............ |cachedir_loaded|
		     cachedir_init_applied ...... |cachedir_init_applied|
		     cachedir_plugin_config ..... |cachedir_plugin_config|
		5.2. Functions .................. |cachedir-functions|
		     Cachedir_apply_for ......... |Cachedir_apply_for()|
		     Cachedir_get ............... |Cachedir_get()|
		     Cachedir_construct_path .... |Cachedir_construct_path()|
		5.3. Events/Autocmds ............ |cachedir-events|
		     CachedirInit ............... |CachedirInit|
		     CachedirApplyAll ........... |CachedirApplyAll|
		     CachedirInitApplyAll ....... |CachedirApplyAll|
	6. Bugs ................................. |cachedir-bugs|
	7. Changelog ............................ |cachedir-changelog|
	8. License .............................. |cachedir-license|


==============================================================================
1. Intro                                                      *cachedir-intro*

Some systems have an cache or temp folder where stuff are cached or
temporarily stored, for example thumbnails, tagfiles, or whatever. However,
some plugins don't do that and save in exotic places, like the current
directory, the directory where the edited file is (very annoying when creating
Debian packages) or even in the |runtimepath| folder.

This plugin tries to convince other plugins to change their cache directory
to the "global" cache directory, for example to the .cache folder, usual in
Linux.


==============================================================================
2. Usage                                                      *cachedir-usage*

You don't interact this plugin on a daily basis, rather you only set it up
initially and for new plugins, if a particular plugin doesn't support cachedir
or cachedir doesn't support that plugin yet. In other words, it's supposed to
be set-and-forget with minimal configuration.

The main variables are |g:cachedir_config|, |g:cachedir_prefix| and
|g:cachedir_vimprefix|.

A path is constructed like this: (ASCII art)          *cachedir-construction*
>
	          /home/neui/.cache / vim- gutentags
	          ---+------------- | --+- -------------> NAME
	             V              |   V
	 |g:cachedir_prefix|        V |g:cachedir_vimprefix|
	                  |g:cachedir_dirsep|

Or when the 'global' in |g:cachedir_config| has been set to 1:

>
	          /home/neui/.cache / vim/
	          ---+------------- | --+-
	             V              |   V
	 |g:cachedir_prefix|        V |g:cachedir_globalprefix|
	                  |g:cachedir_dirsep|

If you like the default settings, and the plugin is supported, there is
nothing to do. However, if you want to add support for a plugin, define
|g:cachedir_config| as your liking, see |g:cachedir_config| for more
information. Here's a example:
>
	let g:cachedir_config = {
				\ 'NAME': 'g:VAR TO BE SET',
				\ 'OTHERNAME': {
				\	'var': 'g:OTHERNAME_CACHEDIR',
				\	'prepend': 1
				\ }
				\ }


==============================================================================
3. Configuration                                             *cachedir-config*

These variables should be set before loading the plugin
(or using |Cachedir_apply_userconfig()|).

------------------------------------------------------------------------------
3.1. cachedir_prefix                     *g:cachedir_prefix* *cachedir_prefix*

A path to the general cache directory.

Default: $TEMP, or $TMP (Windows), $XDG_CACHE_HOME or ~/.cache otherwise

------------------------------------------------------------------------------
3.2. cachedir_vimprefix            *g:cachedir_vimprefix* *cachedir_vimprefix*

The path inside the |g:cachedir_prefix|. If this variable doesn't end with a
'/', for example `vim-`, the directories are then called 'prefix/vim-NAME'.

Default: 'vim-'

------------------------------------------------------------------------------
3.3. cachedir_globalprefix *g:cachedir_globalprefix* *cachedir_globalprefix*

The path inside the |g:cachedir_prefix|, but for plugins that only use few
global cache files.

Default: 'vim/'

------------------------------------------------------------------------------
3.4. cachedir_dirsep                     *g:cachedir_dirsep* *cachedir_dirsep*

Sets the directory separator to use when seperating |g:cachedir_prefix| and
|g:cachedir_vimprefix|. It's always '/' by default.

Default: '/'

------------------------------------------------------------------------------
3.5. cachedir_auto_apply         *g:cachedir_auto_apply* *cachedir_auto_apply*
                                                  *Cachedir_apply_userconfig*

This variable determines whenever it should apply (set the variables of
the plugins) the configuration automatically after loading (|BufWinEnter|).

Set it to 0 before loading the plugin to prevent automatic loading after
startup. In order to apply manually, call |Cachedir_apply_userconfig()|, like
this:
>
	call Cachedir_apply_userconfig()

|Cachedir_apply_userconfig()| also fires |CachedirApplyAll|, and indirectly
|CachedirApply| many times.

Default: 1

------------------------------------------------------------------------------
3.6. cachedir_config                     *g:cachedir_config* *cachedir_config*

This is a dictionary, basically describing what variables there are, how to
handle them and so on.

Each key is a name (usually the plugin name), normally used as a name for the
directory.

Each value is either a string, containing the variable name to be set, or 'x'
to ignore it (see 'ignore' below), or an another dictionary, detailing
more options. These are:

	* 'var' (Str): The variable name to set.
	* 'ignore' (0/1): Ignore, don't apply whatsoever.
	* 'prepend' (0/1): Whenever it should prepend it, along with a comma
	* 'prepend-sep' (Str): Prepend separator
	* 'append' (0/1): Whenever it should append it, along with a comma
	* 'append-sep' (Str): append separator
	* 'cond' (Str): Code that gets executed to check if it should apply it
	* 'name' (Str): Name of the directory, normally the key
	* 'pre' (Str): Prefix for the complete path
	* 'suf' (Str): Suffix for the complete path
	* 'global' (0/1): Whenever it should use a global directory
	* 'path' (Str): Explicit path, normally determined automatically
	* 'prefix' (Str): Custom |g:cachedir_prefix|
	* 'vimprefix' (Str): Custom |g:cachedir_vimprefix| or
	  |g:cachedir_globalprefix|, depending on the global attribute
	* 'mkdir' (0/1): Create directory before assigning

Here's an copy-pasteable version for convince with default values:
>
		\ 'NAME': {
		\ 'var': 'unknown',
		\ 'ignore': 0,
		\ 'cond': '1 == 1',
		\ 'prepend': 0,
		\ 'prepend-sep': ',',
		\ 'append': 0,
		\ 'append-sep': ',',
		\ 'global': 0,
		\ 'prefix': '',
		\ 'vimprefix': '',
		\ 'globalprefix': '',
		\ 'path': '',
		\ 'name': '',
		\ 'pre': '',
		\ 'suf': '',
		\ 'mkdir': 0,
		\ }

Since your user config has the highest priority, please take out the unused
fields!


Default: {}

------------------------------------------------------------------------------
3.7. cachedir_version                  *g:cachedir_version* *cachedir_version*

The current version as a string. PLEASE DON'T SET THIS VARIABLE! This is just
some information.

Default: The current version; See the top of this document.


==============================================================================
4. Supported Plugins                                        *cachedir-plugins*

These are the plugins that this plugin supports out of the box. Other plugins
might also support this plugin indirectly (see |cachedir-dev|), but those
aren't listed here. The [key] is the key-name for use in |g:cachedir_config|.
It's usually the plugin name, minus an '.vim' suffix or 'vim-' prefix, and all
lowercase.

	- [undo] vim "swap files", see |directory|
	- [swap] vim undo file, see |undodir|
	- [gutentags] vim-gutentags (https://github.com/ludovicchabant/vim-gutentags)
	- [ctrlspace] vim-CtrlSpace (https://github.com/vim-ctrlspace/vim-ctrlspace)
	- [ale_cpp] [ale_c] vim-ale (https://github.com/w0rp/ale)


==============================================================================
5. For Plugin Developers                                       *cachedir-dev*

If you are a developer of a plugin and want to support this plugin, this is
for you. For the most simple way, use the autoload feature combined with
a |try|:
>
	try
		call cachedir#register('NAME', {'var': 'VAR'})
	catch /Vim(call):E117:.*/
		" No cachedir plugin found, do nothing
	endtry

This basically puts your config into |g:cachedir_plugin_config| and calls
|Cachedir_apply_for| to apply your changes, if it already has done the initial
apply (|g:cachedir_init_applied| is 1).

The dictionary as the 2nd argument to |cachedir#register()| is in the same
format as |g:cachedir_config|. Note that the user is still be able to
overwrite your changes (see |Cachedir_get()|), since the user (should) know
the best. Because of this, please do NOT overwrite |g:cachedir_config|.

Of you don't like the above approach, here's an alternative:
>
	" Register cachedir plugin
	if !exists("g:cachedir_plugin_config")
		let g:cachedir_plugin_config = {}
	endif
	let g:cachedir_plugin_config['NAME'] = {'var': 'VAR'}
	" Re-Apply config if neccesary
	if exists("g:cachedir_init_applied") && g:cachedir_init_applied == 1
		Cachedir_apply_for('NAME')
	endif


------------------------------------------------------------------------------
5.1. Configuration                                       *Cachedir-dev-config*

                                         *g:loaded_cachedir* *loaded_cachedir*
|g:cachedir_loaded|	Set to 1 when cachedir has started to load. Useful to
			check whenever it has been loaded.

                             *g:cachedir_init_applied* *cachedir_init_applied*
|g:cachedir_init_applied|	(Read only) It is set to 1 when the
			configuration has been applied (called
			|Cachedir_apply_userconfig|). Useful to determine
			when you need to apply it.

                           *g:cachedir_plugin_config* *cachedir_plugin_config*
|g:cachedir_plugin_config|	Basically the |g:cachedir_config| version,
			but is supposed to be set by plugins.
			It basically sets the "defaults", overwriting
			the internal defaults of cachedir, but can be
			overwritten by the user in
			|g:cachedir_config|, but please don't modify
			that variable in your plugin.

------------------------------------------------------------------------------
5.2. Functions                                            *Cachedir-functions*

Cachedir_apply_for({NAME} [, {argdefaults}])         *Cachedir_apply_for()*
		Apply configuration for a certain plugin {NAME}.
		The parameter {plugindefault} is passed to |Cachedir_get()|.
		Fires |CachedirApply| after applying.

Cachedir_get({NAME} [, {argdefaults}])                     *Cachedir_get()*
		Get the data, that can be used for parsing.
		It'll be in the format of the value-part of
		|g:cachedir_config|, but usually more explicit.
		
		The configuration system is "layered". This it'll begin from
		a default configuration, and goes through some "layers" that
		overwrite the previous configuration. The order from top to
		bottom:
		
		- Global default
		- Premade default for that plugin
		- Plugin default (|g:cachedir_plugin_config|)
		- Argument default ({argdefaults})
		- User config (|g:cachedir_config|)

Cachedir_construct_path({NAME})                    *Cachedir_construct_path()*
		Constructs a path using the parameter as NAME and returns it.
		See |cachedir-construction| for how it constructs the path.

cachedir#register({NAME}, {CONFIG})                      *cachedir#register()*
		Register plugin {NAME} with the {CONFIG} configuration.
		It Registers the plugin in |g:cachedir_plugin_config| and
		calls |Cachedir_apply_for()| appropriately.

------------------------------------------------------------------------------
5.3. Events/Autocmds                     *Cachedir-autocmds* *Cachedir-events*

Events that can be used by |:autocmd|.

                                                               *CachedirInit*
CachedirInit		Fired after loading cachedir plugin.

                                                               *CachedirApply*
CachedirApplyAll	Fired after calling |Cachedir_apply_userconfig()|
			after applying the config.

                                                        *CachedirInitApplyAll*
CachedirInitApplyAll	Like |CachedirApplyAll|, but only fired for the
			first time (in addition to |CachedirApplyAll|).


==============================================================================
6. Bugs                                                        *cachedir-bugs*

There aren't any bugs. At least it shouldn't. If you think you did find one,
report it on the issue tracker: https://gitlab.com/Neui/cachedir.vim
Feedback and changes (like supporting new plugins) is also welcome.
Alternatively, you'll find a mirror on https://github.com/Neui/cachedir.vim


==============================================================================
7. Changelog                                              *cachedir-changelog*

1.0 (2019-01-??)
	- Initial release


==============================================================================
8. License                                                  *cachedir-license*

|:read| LICENSE
BSD 2-Clause License

Copyright (c) 2018, Neui
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


fin.


vim:tw=78:ts=8:ft=help:norl:
